FORMAT: 1A
HOST: http://pwajg-server.herokuapp.com/apiv1/

# pwajg-server

Simple Node js server for Discussion board.

# Group Authentication

## API token authentication [/auth]

### Generate new token [POST]

Providing `login` and `password` of existing user returns authentication token for comunication with API. Returned token must by provided in `Auth` header with each subsequent request, otherwise you get back **401 Unauthorized** status code.
+ Request

        {
            "login": "login",
            "password": "password"
        }

+ Response 200 (application/json)

        {
            "token": "ac4cb54caac5bca7ef455",
        }

+ Response 404 (application/json)

### Prolong token validity [PUT]

This call prolongs your token validity by another 30 minutes. Note that every call with token prolongs token validity. This could be used to keep token alive by calling this resource on background.

+ Request
    + Headers

            Auth: {token}

+ Response 200 (application/json)

### Invalidate current token [DELETE]

+ Request
    + Headers

            Auth: {token}

+ Response 200 (application/json)

### Get authentication user id [GET]

+ Request
    + Headers

            Auth: {token}

+ Response 200 (application/json)

        {
            "user_id": "id",
        }
        
# Group User

## User details [/users/{user_id}]

+ Parameters
    + user_id (id) - User identificator

### Get user by id. [GET]

+ Request
    + Headers

            Auth: {token}


+ Response 200 (application/json)

        {
            "user_id": "id",
            "login": "login"
        }
        
+ Response 404 (application/json)

# Group Threds

## Threds management [/threads]

### Get all threads [GET]

+ Request
    + Headers

            Auth: {token}


+ Response 200 (application/json)

        [
        {
            "thread_id": "thread_id1",
            "user_id": "user_id",
            "name": "name",
            "body": "body",
            "crated": "timestamp"
        },
        {
            "thread_id": "thread_id2",
            "user_id": "user_id",
            "name": "name",
            "body": "body",
            "crated": "timestamp"
        }
        ]

## Thread detail [/threads/{thread_id}]

+ Parameters
    + thread_id (id) - Thread identificator
    
### Get detail [GET]

+ Request
    + Headers

            Auth: {token}


+ Response 200 (application/json)

        {
            "thread_id": "thread_id1",
            "user_id": "user_id",
            "name": "name",
            "body": "body",
            "crated": "timestamp"
        }

### Create new thread [POST]

+ Request
    + Headers

            Auth: {token}

    + Body

            {
                "name": "name",
                "body": "body",
            }


+ Response 201 (application/json)

        {
            "thread_id": "thread_id",
            "user_id": "user_id",
            "name": "name",
            "body": "body",
            "crated": "timestamp"
        }

### Delete thread [DELETE]
Deletes thread with all the posts, only owner (otherwise **403 Forbiden**) of the thread can do it.

+ Request
    + Headers

            Auth: {token}

+ Response 204 (application/json)

+ Response 403 (application/json)

## Posts in thread [/threads/{thread_id}/posts]

+ Parameters
    + thread_id (id) - Thread identificator
    
### Get all posts in thread [GET]

+ Request
    + Headers

            Auth: {token}

+ Response 200 (application/json)

        [
        {
            "post_id": "post_id1",
            "user_id": "user_id",
            "body": "body",
            "crated": "timestamp"
        },
        {
            "post_id": "post_id2",
            "user_id": "user_id",
            "body": "body",
            "crated": "timestamp"
        }
        ]

### Post to thread [POST]

+ Request
    + Headers

            Auth: {token}

    + Body
    
            {
                "body": "body"
            }

+ Response 201 (application/json)
        
        {
            "post_id": "post_id",
            "user_id": "user_id",
            "body": "body",
            "crated": "timestamp"
        }

### Delete post in thread [DELETE]

+ Request
    + Headers

            Auth: {token}

    + Body
    
            {
                "post_id": "post_id"
            }

+ Response 204 (application/json)

+ Response 403 (application/json)