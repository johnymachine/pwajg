FORMAT: 1A
HOST: http://pwajg-server.herokuapp.com/apiv1/

# pwajg-server

Simple Node js server for Discussion board.


# Group Authentication

## API token authentication [/auth]
Authentization resource for session managment.


### Request new token [POST]

Providing correct `login` and `password` of existing user returns authentication token for comunication with API. Returned token must by provided in `token` header with each subsequent request, otherwise you get back **401 Unauthorized** status code.
+ Request

        {
            "username": "username",
            "password": "password"
        }

+ Response 201 (application/json)

        {
           "_id": "565b03636f50bc470cc6bcd4",
           "_owner": {
              "_id": "562d378641fecab81c706bac",
              "email": "jandoe@doe.com"
              "name": "John Doe",
              "username": "user",
              "created_at": "2015-11-29T13:53:39.000Z",
              "updated_at": "2015-11-29T13:53:39.654Z"
           },
           "created_at": "2015-11-29T13:53:39.000Z",
           "token": "16c7e5c8627b3e9a73b4b79d4b5d9a802cd0cc094f35db1af4b146768e6656787899db04310f67bd64d3204b300fbb3634f79aea03faa2ebfea6a578d1415ac7",
           "updated_at": "2015-11-29T13:53:39.654Z"
        }

+ Response 404 (application/json)

+ Response 500 (application/json)


### Get authenticated user [GET]
This action provides user information based on provided token.

+ Request
    + Headers

            token: {token}

+ Response 200 (application/json)

        {
            "_id": "562d378641fecab81c706bac",
            "email": "jandoe@doe.com"
            "name": "John Doe",
            "username": "user",
            "created_at": "2015-11-29T13:53:39.000Z",
            "updated_at": "2015-11-29T13:53:39.654Z"
        }

+ Response 401 (application/json)        

+ Response 500 (application/json)


### Prolong token validity [PUT]

This call prolongs your token validity by another 30 minutes. Note that every call with token prolongs token validity. This could be used to keep token alive by calling this resource on background.

+ Request
    + Headers

            token: {token}

+ Response 200 (application/json)

+ Response 401 (application/json)

+ Response 500 (application/json)

### Invalidate current token [DELETE]
By this action you invalidate your token. You wont be able to communicate with API, until you perform you repeat authentification process.

+ Request
    + Headers

            token: {token}

+ Response 204 (application/json)

+ Response 401 (application/json)

+ Response 500 (application/json)


# Group User

## User collection [/users{?page,order,size}]

+ Parameters
    + page (optional) - Requested page in paggination
    + order (optional) - Order of returned collection
    + size (optional) - Number of items on page


### Get user details [GET]
Query all users in system.

+ Request
    + Headers

            token: {token}


+ Response 200 (application/json)

        [
            {
                "_id": "562d378641fecab81c706bac",
                "email": "jandoe@doe.com"
                "name": "John Doe",
                "username": "user",
                "created_at": "2015-11-29T13:53:39.000Z",
                "updated_at": "2015-11-29T13:53:39.654Z"
            },
            {
                "_id": "562d378641fecab81c826bac",
                "email": "jandeo@deo.com"
                "name": "John Deo",
                "username": "user1",
                "created_at": "2015-11-29T13:53:39.000Z",
                "updated_at": "2015-11-29T13:53:39.654Z"
            }
        ]
        
+ Response 401 (application/json)

+ Response 500 (application/json)


### Register new user [POST]
Register new user into the system.

+ Request
    + Headers

            token: {token}
            
    + Body

            {
                "email": "jandeo@deos.com",
                "name": "John Deos",
                "username": "user3",
                "password": "secret"
            }


+ Response 201 (application/json)

+ Response 409 (application/json)

+ Response 500 (application/json)


## User details [/users/{user_id}]

+ Parameters
    + user_id (id) - User identificator


### Get user by id [GET]
Get single user by his id.

+ Request
    + Headers

            token: {token}

+ Response 200 (application/json)
        
        {
            "_id": "562d378641fecab81c826bac",
            "email": "jandeo@deo.com"
            "name": "John Deo",
            "username": "user1",
            "created_at": "2015-11-29T13:53:39.000Z",
            "updated_at": "2015-11-29T13:53:39.654Z"
        }

+ Response 401 (application/json)

+ Response 500 (application/json)

### Update certain user by id [PUT]
Get single user by his id.

+ Request
    + Headers

            token: {token}
            
    + Body

            {
                "email": "jandeo@deos.com",
                "name": "John Deos",
                "username": "user3",
                "password": "secret"
            }

+ Response 200 (application/json)
        
        {
            "_id": "562d378641fecab81c826bac",
            "email": "jandeo@deo.com"
            "name": "John Deo",
            "username": "user1",
            "created_at": "2015-11-29T13:53:39.000Z",
            "updated_at": "2015-11-29T13:53:39.654Z"
        }

+ Response 403 (application/json)

+ Response 401 (application/json)

+ Response 409 (application/json)

+ Response 500 (application/json)


### Delete user [DELETE]
Get single user by his id.

+ Request
    + Headers

            token: {token}

+ Response 204 (application/json)

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 500 (application/json)


# Group Threds

## Threds management [/threads{?page,order,size}]

+ Parameters
    + page (optional) - Requested page in paggination
    + order (optional) - Order of returned collection
    + size (optional) - Number of items on page


### Get all threads [GET]
Get all threads in application.

+ Request
    + Headers

            token: {token}

+ Response 200 (application/json)

        [
            {
            "_id": "565a3e67b9b374da1fdd6ac7",
            "text": "Thread1",
            "created_at": "2015-11-28T23:53:11.872Z",
            "updated_at": "2015-11-28T23:53:11.872Z",
            "_owner":
                {
                    "_id": "562d378641fecab81c826bac",
                    "email": "jandeo@deo.com"
                    "name": "John Deo",
                    "username": "user1",
                    "created_at": "2015-11-29T13:53:39.000Z",
                    "updated_at": "2015-11-29T13:53:39.654Z"
                }
            },
            {
            "_id": "565a3e67b9b374da1fcc6ac7",
            "text": "Thread2",
            "created_at": "2015-11-28T23:53:11.872Z",
            "updated_at": "2015-11-28T23:53:11.872Z",
            "_owner":
                {
                    "_id": "562d378641fecab81c826bac",
                    "email": "jandeo@deo.com"
                    "name": "John Deo",
                    "username": "user1",
                    "created_at": "2015-11-29T13:53:39.000Z",
                    "updated_at": "2015-11-29T13:53:39.654Z"
                }
            },
        ]
        
+ Response 403 (application/json)

+ Response 401 (application/json)

+ Response 409 (application/json)

+ Response 500 (application/json)


### Create new thread [POST]
Create new thread from provided data. Threads with same name are allowed.

+ Request
    + Headers

            token: {token}
            
    + Body

            {
                "title": "Title of the question.",
                "body": "Body of th question."
            }


+ Response 201 (application/json)

+ Response 401 (application/json)

+ Response 409 (application/json)

+ Response 500 (application/json)


## Thread detail [/threads/{thread_id}]

+ Parameters
    + thread_id (id) - Thread identificator

    
### Get thread detail [GET]
Get detailed description od thread.

+ Request
    + Headers

            token: {token}


+ Response 200 (application/json)

        {
            "_id": "565a3e67b9b374da1fcc6ac7",
            "text": "Thread2",
            "created_at": "2015-11-28T23:53:11.872Z",
            "updated_at": "2015-11-28T23:53:11.872Z",
            "_owner":
                {
                    "_id": "562d378641fecab81c826bac",
                    "email": "jandeo@deo.com"
                    "name": "John Deo",
                    "username": "user1",
                    "created_at": "2015-11-29T13:53:39.000Z",
                    "updated_at": "2015-11-29T13:53:39.654Z"
                }
        }

+ Response 401 (application/json)

+ Response 500 (application/json)


### Update thread [PUT]
Update thread title.

+ Request
    + Headers

            token: {token}
            
    + Body

            {
                "title": "New title of the question."
            }


+ Response 200 (application/json)

        {
            "_id": "565a3e67b9b374da1fcc6ac7",
            "text": "Thread2",
            "created_at": "2015-11-28T23:53:11.872Z",
            "updated_at": "2015-11-28T23:53:11.872Z",
            "_owner":
                {
                    "_id": "562d378641fecab81c826bac",
                    "email": "jandeo@deo.com"
                    "name": "John Deo",
                    "username": "user1",
                    "created_at": "2015-11-29T13:53:39.000Z",
                    "updated_at": "2015-11-29T13:53:39.654Z"
                }
        }

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 409 (application/json)

+ Response 500 (application/json)


### Delete thread [DELETE]
Deletes thread with all the posts in it. Only owner of the thread can do it. (otherwise **403 Forbiden**)

+ Request
    + Headers

            token: {token}

+ Response 204 (application/json)

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 500 (application/json)


## Posts in thread [/threads/{thread_id}/posts{?page,order,size}]

+ Parameters
    + thread_id (id) - Thread identificator
    + page (optional) - Requested page in paggination
    + order (optional) - Order of returned collection
    + size (optional) - Number of items on page

  
### Get all posts in thread [GET]
List of all the post inside thread.

+ Request
    + Headers

            token: {token}

+ Response 200 (application/json)

        [
        {
            "_id": "565a3e67b9b374da1fcc6ac7",
            "text": "Post1",
            "_thread": "565a3e67b9b374daafcc6ac7",
            "is_main": true,
            "created_at": "2015-11-28T23:53:11.872Z",
            "updated_at": "2015-11-28T23:53:11.872Z",
            "_owner":
                {
                    "_id": "562d378641fecab81c826bac",
                    "email": "jandeo@deo.com"
                    "name": "John Deo",
                    "username": "user1",
                    "created_at": "2015-11-29T13:53:39.000Z",
                    "updated_at": "2015-11-29T13:53:39.654Z"
                }
        },
        {
            "_id": "565a3e67b9b374da1fcc6ac7",
            "text": "Post2",
            "_thread": "565c4e67b9b374daafcc6ac7",
            "is_main": false,
            "created_at": "2015-11-28T23:53:11.872Z",
            "updated_at": "2015-11-28T23:53:11.872Z",
            "_owner":
                {
                    "_id": "562d378641fecab81c826bac",
                    "email": "jandeo@deo.com"
                    "name": "John Deo",
                    "username": "user1",
                    "created_at": "2015-11-29T13:53:39.000Z",
                    "updated_at": "2015-11-29T13:53:39.654Z"
                }
        }
        ]


### Post to thread [POST]
Add new post to the thread.

+ Request
    + Headers

            token: {token}

    + Body
    
            {
                "body": "Post body."
            }

+ Response 201 (application/json)
        
        {
            "post_id": "post_id",
            "user_id": "user_id",
            "body": "body",
            "crated": "timestamp"
        }

### Delete post from thread [DELETE]
Delete post from thread. Only owner of the post can do it. (otherwise **403 Forbiden**)

+ Request
    + Headers

            token: {token}

    + Body
    
            {
                "post_id": "post_id"
            }

+ Response 204 (application/json)

+ Response 403 (application/json)