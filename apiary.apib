FORMAT: 1A
HOST: http://pwajg-server.herokuapp.com/apiv1/

# pwajg-server

Simple Node js server for Discussion board. Based on **MEAN** stack.

**Assignment**

Vaším úkolem je vypracovat jednoduchý komunikační systém - diskusní fórum. Výsledný systém se bude skládat z webové služby (backend) a klientské aplikace. Součástí řešení musí být také návrh rozhraní webové služby (API). Na rozdíl od našich předchozích setkání, zde je cílem spíše samotná cesta. Samotný problém je poměrně jednoduchý, jde mi více o kvalitu řešení a o to abyste o něm přemýšleli. Smyslem není to "spíchnout" za víkend za pomoci oblíbeného PHP frameworku, ale naučit se něco nového. 

Komunikační systém by měl umět pracovat s entitou uživatele, uživatel by měl mít možnost zakládat nová diskusní vlákna (témata), přidávat příspěvky do diskusí a samozřejmě také diskuse číst. Další funkce (uživatelské role, kategorie vláken apod.) nejsou potřeba. 

Jak klient, tak backend budou napsány v JavaScriptu. Backend poběží pod Node.js, pro klienta můžete použít některý z moderních JS frameworků - ReactJS, Angular, Ember aj. 

Protože k NodeJS se dostaneme až v druhé polovině semestru, potřebujete pro psaní klienta mock server. K jeho vytvoření a zároveň k vytvoření specifikace API použijme službu Apiary.io. 

_Postup řešení:_

+ identifikovat objekty (Resource) která bude vaše aplikace používat. Navrhnout jakou reprezentaci těchto objektů (JSON, HTML, ATOM, XML) bude server předkládat klientům.
+ návrh implementovat v podobě apiblueprintu (apiary)
+ vytvořit klienta komunikujícího s mock api (apiary služba)
+ vytvořit backend v NodeJS
+ backend službu zveřejnit pomocí některé cloudové služby (patrně Heroku)

**Server**
+ Apiary documentation at: http://docs.pwajg.apiary.io/
+ Express REST backend aviable at http://pwajg-server.herokuapp.com/apiv1
+ Github repository: https://github.com/johnymachine/pwajg-server

**Client**
+ Github repository: https://github.com/johnymachine/pwajg-client


# Group Authentication

## Token based authentication [/auth]
Authentication resource for token managment.


### Issue new token [POST]
When provided with correct `login` and `password` of existing user returns authentication token for comunication with API. Returned token must by provided in `token` header with each subsequent request (except when creatinng new user), otherwise you get back **401 Unauthorized** status code.
+ Request

        {
            "username": "user",
            "password": "password"
        }

+ Response 201 (application/json)

        {
           "_id": "565b03636f50bc470cc6bcd4",
           "_owner": {
              "_id": "562d378641fecab81c706bac",
              "email": "jandoe@doe.com"
              "name": "John Doe",
              "username": "user",
              "created_at": "2015-11-29T13:53:39.000Z",
              "updated_at": "2015-11-29T13:53:39.654Z"
           },
           "created_at": "2015-11-29T13:53:39.000Z",
           "token": "16c7e5c8627b3e9a73b4b79d4b5d9a802cd0cc094f35db1af4b146768e6656787899db04310f67bd64d3204b300fbb3634f79aea03faa2ebfea6a578d1415ac7",
           "updated_at": "2015-11-29T13:53:39.654Z"
        }

+ Response 404 (application/json)

+ Response 500 (application/json)


### Get user for token [GET]
This action provides current user information based on provided token.

+ Request
    + Headers

            token: {token}

+ Response 200 (application/json)

        {
            "_id": "562d378641fecab81c706bac",
            "email": "jandoe@doe.com"
            "name": "John Doe",
            "username": "user",
            "created_at": "2015-11-29T13:53:39.000Z",
            "updated_at": "2015-11-29T13:53:39.654Z"
        }

+ Response 401 (application/json)        

+ Response 500 (application/json)


### Prolong token validity [PUT]

This call prolongs your token validity by another 30 minutes. Note that every call with token prolongs token validity. This could be used as minimal overhead to keep token alive by calling this resource on background.

+ Request
    + Headers

            token: {token}

+ Response 200 (application/json)

+ Response 401 (application/json)

+ Response 500 (application/json)

### Invalidate token [DELETE]
By this action you invalidate your token. You won't be able to communicate with API, until you repeat authentification process.

+ Request
    + Headers

            token: {token}

+ Response 204 (application/json)

+ Response 401 (application/json)

+ Response 500 (application/json)


# Group User

## User collection [/users{?page,order,size}]

+ Parameters
    + page (optional) - Requested page in paggination
    + order (optional) - Order of returned collection
    + size (optional) - Number of items on page


### Users [GET]
Query all users in system.

+ Request
    + Headers

            token: {token}


+ Response 200 (application/json)

        [
            {
                "_id": "562d378641fecab81c706bac",
                "email": "jandoe@doe.com"
                "name": "John Doe",
                "username": "user",
                "created_at": "2015-11-29T13:53:39.000Z",
                "updated_at": "2015-11-29T13:53:39.654Z"
            },
            {
                "_id": "562d378641fecab81c826bac",
                "email": "jandeo@deo.com"
                "name": "John Deo",
                "username": "user1",
                "created_at": "2015-11-29T13:53:39.000Z",
                "updated_at": "2015-11-29T13:53:39.654Z"
            }
        ]
        
+ Response 401 (application/json)

+ Response 500 (application/json)


### Create new user [POST]
Create new user, this could be made without a being logged in.

+ Request
    + Headers

            token: {token}
            
    + Body

            {
                "email": "jandeo@deos.com",
                "name": "John Deos",
                "username": "user3",
                "password": "secret"
            }


+ Response 201 (application/json)

+ Response 409 (application/json)

+ Response 500 (application/json)


## User details [/users/{user_id}]
Manipulate specific users data.

+ Parameters
    + user_id (id) - User identificator


### Get user [GET]
Get single user by his id.

+ Request
    + Headers

            token: {token}

+ Response 200 (application/json)
        
        {
            "_id": "562d378641fecab81c826bac",
            "email": "jandeo@deo.com"
            "name": "John Deo",
            "username": "user1",
            "created_at": "2015-11-29T13:53:39.000Z",
            "updated_at": "2015-11-29T13:53:39.654Z"
        }

+ Response 401 (application/json)

+ Response 500 (application/json)

### Update user [PUT]
Update data of user specified by id. User is allowed to edit only him self. Otherwise **403 Forbidden** is returned.

+ Request
    + Headers

            token: {token}
            
    + Body

            {
                "email": "jandeo@deos.com",
                "name": "John Deos",
                "username": "user3",
                "password": "secret"
            }

+ Response 200 (application/json)
        
        {
            "_id": "562d378641fecab81c826bac",
            "email": "jandeo@deo.com"
            "name": "John Deo",
            "username": "user1",
            "created_at": "2015-11-29T13:53:39.000Z",
            "updated_at": "2015-11-29T13:53:39.654Z"
        }

+ Response 403 (application/json)

+ Response 401 (application/json)

+ Response 409 (application/json)

+ Response 500 (application/json)


### Delete user [DELETE]
Removes user and all of his data from system. User is allowed to delete only him self. Otherwise **403 Forbidden** is returned. 

+ Request
    + Headers

            token: {token}

+ Response 204 (application/json)

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 500 (application/json)


# Group Threads

## Threads collection [/threads{?page,order,size}]

+ Parameters
    + page (optional) - Requested page in paggination
    + order (optional) - Order of returned collection
    + size (optional) - Number of items on page


### Threads [GET]
Query all users in system.

+ Request
    + Headers

            token: {token}

+ Response 200 (application/json)

        [
            {
            "_id": "565a3e67b9b374da1fdd6ac7",
            "text": "Thread1",
            "created_at": "2015-11-28T23:53:11.872Z",
            "updated_at": "2015-11-28T23:53:11.872Z",
            "_owner":
                {
                    "_id": "562d378641fecab81c826bac",
                    "email": "jandeo@deo.com"
                    "name": "John Deo",
                    "username": "user1",
                    "created_at": "2015-11-29T13:53:39.000Z",
                    "updated_at": "2015-11-29T13:53:39.654Z"
                }
            },
            {
            "_id": "565a3e67b9b374da1fcc6ac7",
            "text": "Thread2",
            "created_at": "2015-11-28T23:53:11.872Z",
            "updated_at": "2015-11-28T23:53:11.872Z",
            "_owner":
                {
                    "_id": "562d378641fecab81c826bac",
                    "email": "jandeo@deo.com"
                    "name": "John Deo",
                    "username": "user1",
                    "created_at": "2015-11-29T13:53:39.000Z",
                    "updated_at": "2015-11-29T13:53:39.654Z"
                }
            },
        ]
        
+ Response 403 (application/json)

+ Response 401 (application/json)

+ Response 409 (application/json)

+ Response 500 (application/json)


### Create new thread [POST]
Create new thread from provided data. Threads with same name are allowed. This automaticly creates new post which serves as thread body with flag **is_main**.

+ Request
    + Headers

            token: {token}
            
    + Body

            {
                "title": "Title of the question.",
                "body": "Body of th question."
            }


+ Response 201 (application/json)

+ Response 401 (application/json)

+ Response 409 (application/json)

+ Response 500 (application/json)


## Thread detail [/threads/{thread_id}]
Manipulate with data of specific thread.

+ Parameters
    + thread_id (id) - Thread identificator

    
### Get thread detail [GET]
Get detailed description od thread.

+ Request
    + Headers

            token: {token}


+ Response 200 (application/json)

        {
            "_id": "565a3e67b9b374da1fcc6ac7",
            "text": "Thread2",
            "created_at": "2015-11-28T23:53:11.872Z",
            "updated_at": "2015-11-28T23:53:11.872Z",
            "_owner":
                {
                    "_id": "562d378641fecab81c826bac",
                    "email": "jandeo@deo.com"
                    "name": "John Deo",
                    "username": "user1",
                    "created_at": "2015-11-29T13:53:39.000Z",
                    "updated_at": "2015-11-29T13:53:39.654Z"
                }
        }

+ Response 401 (application/json)

+ Response 500 (application/json)


### Update thread [PUT]
Updates thread title. Only owner is allowed to edit, otherwise **403 Forbidden** is returned. 

+ Request
    + Headers

            token: {token}
            
    + Body

            {
                "title": "New title of the question."
            }


+ Response 200 (application/json)

        {
            "_id": "565a3e67b9b374da1fcc6ac7",
            "text": "Thread2",
            "created_at": "2015-11-28T23:53:11.872Z",
            "updated_at": "2015-11-28T23:53:11.872Z",
            "_owner":
                {
                    "_id": "562d378641fecab81c826bac",
                    "email": "jandeo@deo.com"
                    "name": "John Deo",
                    "username": "user1",
                    "created_at": "2015-11-29T13:53:39.000Z",
                    "updated_at": "2015-11-29T13:53:39.654Z"
                }
        }

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 409 (application/json)

+ Response 500 (application/json)


### Delete thread [DELETE]
Deletes thread with all the posts in it. Only owner is allowed to edit, otherwise **403 Forbidden** is returned.

+ Request
    + Headers

            token: {token}

+ Response 204 (application/json)

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 500 (application/json)


## Posts collection [/threads/{thread_id}/posts{?page,order,size}]

+ Parameters
    + thread_id (id) - Thread identificator
    + page (optional) - Requested page in paggination
    + order (optional) - Order of returned collection
    + size (optional) - Number of items on page

  
### Posts in thread [GET]
Query all users in system.

+ Request
    + Headers

            token: {token}

+ Response 200 (application/json)

        [
        {
            "_id": "565a3e67b9b374da1fcc6ac7",
            "text": "Post1",
            "_thread": "565a3e67b9b374daafcc6ac7",
            "is_main": true,
            "created_at": "2015-11-28T23:53:11.872Z",
            "updated_at": "2015-11-28T23:53:11.872Z",
            "_owner":
                {
                    "_id": "562d378641fecab81c826bac",
                    "email": "jandeo@deo.com"
                    "name": "John Deo",
                    "username": "user1",
                    "created_at": "2015-11-29T13:53:39.000Z",
                    "updated_at": "2015-11-29T13:53:39.654Z"
                }
        },
        {
            "_id": "565a3e67b9b374da1fcc6ac7",
            "text": "Post2",
            "_thread": "565c4e67b9b374daafcc6ac7",
            "is_main": false,
            "created_at": "2015-11-28T23:53:11.872Z",
            "updated_at": "2015-11-28T23:53:11.872Z",
            "_owner":
                {
                    "_id": "562d378641fecab81c826bac",
                    "email": "jandeo@deo.com"
                    "name": "John Deo",
                    "username": "user1",
                    "created_at": "2015-11-29T13:53:39.000Z",
                    "updated_at": "2015-11-29T13:53:39.654Z"
                }
        }
        ]


### Post to thread [POST]
Create new post to thread.

+ Request
    + Headers

            token: {token}

    + Body
    
            {
                "body": "Post body."
            }

+ Response 201 (application/json)

        {
            "_id": "565a3e67b9b374da1fcc6ac7",
            "text": "Post2",
            "_thread": "565c4e67b9b374daafcc6ac7",
            "is_main": false,
            "created_at": "2015-11-28T23:53:11.872Z",
            "updated_at": "2015-11-28T23:53:11.872Z",
            "_owner":
                {
                    "_id": "562d378641fecab81c826bac",
                    "email": "jandeo@deo.com"
                    "name": "John Deo",
                    "username": "user1",
                    "created_at": "2015-11-29T13:53:39.000Z",
                    "updated_at": "2015-11-29T13:53:39.654Z"
                }
        }

+ Response 201 (application/json)

+ Response 401 (application/json)

+ Response 409 (application/json)

+ Response 500 (application/json)


# Group Posts

## Post detail [/threads/{post_id}]
Manipulate specific post data.

+ Parameters
    + post_id (id) - Post identificator


### Get post detail [GET]
Returns details about post.

+ Request
    + Headers

            token: {token}

+ Response 200 (application/json)

        {
            "_id": "565a3e67b9b374da1fcc6ac7",
            "text": "Post1",
            "_thread": "565a3e67b9b374daafcc6ac7",
            "is_main": true,
            "created_at": "2015-11-28T23:53:11.872Z",
            "updated_at": "2015-11-28T23:53:11.872Z",
            "_owner":
                {
                    "_id": "562d378641fecab81c826bac",
                    "email": "jandeo@deo.com"
                    "name": "John Deo",
                    "username": "user1",
                    "created_at": "2015-11-29T13:53:39.000Z",
                    "updated_at": "2015-11-29T13:53:39.654Z"
                }
        }

+ Response 401 (application/json)

+ Response 404 (application/json)

+ Response 500 (application/json)


### Update post [PUT]
Updates post data. Only owner is allowed to delete, otherwise **403 Forbidden** is returned.

+ Request
    + Headers

            token: {token}

    + Body
    
            {
                "body": "Post body."
            }

+ Response 201 (application/json)

        {
            "_id": "565a3e67b9b374da1fcc6ac7",
            "text": "Post2",
            "_thread": "565c4e67b9b374daafcc6ac7",
            "is_main": false,
            "created_at": "2015-11-28T23:53:11.872Z",
            "updated_at": "2015-11-28T23:53:11.872Z",
            "_owner":
                {
                    "_id": "562d378641fecab81c826bac",
                    "email": "jandeo@deo.com"
                    "name": "John Deo",
                    "username": "user1",
                    "created_at": "2015-11-29T13:53:39.000Z",
                    "updated_at": "2015-11-29T13:53:39.654Z"
                }
        }

+ Response 201 (application/json)

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 409 (application/json)

+ Response 500 (application/json)


### Delete post from thread [DELETE]
Deletes post from thread. Only owner is allowed to delete, otherwise **403 Forbidden** is returned.

+ Request
    + Headers

            token: {token}

+ Response 204 (application/json)

+ Response 401 (application/json)

+ Response 403 (application/json)

+ Response 500 (application/json)
